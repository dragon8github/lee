<?php 
namespace core\frame;
use core\frame\lee_mvc; 
ini_set('date.timezone','Asia/Shanghai');

class lee_frame
{
    public $folder = "";       //项目文件夹
    public $entry = "";        //入口文件
    function __construct($name)
    {
        $this->folder = getcwd().'/'.$name;
        $this->entry = $this->folder.'/index.php';
    }

    function compile()
    {
        //获取项目/code下所有的文件
        $_files = scandir($this->folder.'/code');
        foreach($_files as $_file)
        {
            //匹配如aaa.var.php的文件
            if(preg_match("/\w+\.var|func|class\.php$/i", $_file))
            {
                require($this->folder.'/code/'.$_file);
            }
        }

        unset($_files);  //摧毁变量，不要污染到自定义的变量，也是为了下面的get_defined_vars
        unset($_file);   //摧毁变量，不要污染到自定义的变量，也是为了下面的get_defined_vars
        
        $var_results = var_export(get_defined_vars(),true);
        $result = '<?php'.PHP_EOL
        ."extract({$var_results});";


        file_put_contents($this->folder.'/vars', $result);


        //获取所有自定义函数                 
        $func_results = get_defined_functions()['user']; 

        //拼接的函数字符串
        $func_str = "<?php ".PHP_EOL
        ."/*".PHP_EOL
        ."* compile by lee ".date('Y-m-d h:i:s').PHP_EOL
        ."*/".PHP_EOL;

        foreach ($func_results as $func) 
        {
             //反射（函数）
            $f = new \ReflectionFunction($func);
            $start=$f->getStartLine();  //函数所在文件位置的起始行
            $end=$f->getEndLine();      //函数所在文件位置的结束行
            $file_arr = file($f->getFileName()); //根据路径获取所有的内容，根据内容的换行作为数组的索引
            $func_arr = array_slice($file_arr, $start - 1,$end - $start + 1); //根据上面的数组，返回纯函数的行内容
            $func_str .= implode($func_arr); //获取函数纯字符串
        }

        file_put_contents($this->folder.'/functions', $func_str);


        //获取项目中所有的类
        $class_Result = get_declared_classes();
        //获取当前类名的键
        $class_key = array_search(__CLASS__, $class_Result);
        //我也不知道为啥排到当前类之后的类就是自定义的类,算了先写再说吧
        $class_Result = array_slice($class_Result, $class_key + 1);
        $arr1 = array();
        foreach ($class_Result as $value) 
        {
          $mvc = new lee_mvc($value);
          if($mvc->IsController())
          {
                $arr2 = $mvc->getRequestMapping();
                $arr1 = array_merge($arr1,$arr2);
          }
        }

        file_put_contents($this->folder.'/request_route', "<?php ".PHP_EOL." return ".var_export($arr1,true).";");
       
        echo "lee compile success".PHP_EOL;
    }

    function run()
    {
        //创建项目文件夹（如果不存在）
        !file_exists($this->folder) && mkdir($this->folder);  
        if(!file_exists($this->entry))
        {
            //打开缓存区，不让内容输出到界面去
            ob_start();
            //这个东西比较复杂，首先将指定的类中的属性化为一个数组，然后extract解析数组
            extract(get_object_vars($this)); 
            //获取模板内容（需要好好研究学习一下模板的小技巧）
            include dirname(__FILE__).'/tpl/index.tpl';
            //获取缓冲区的内容
            $contents = ob_get_contents();
            //关闭并且清除缓冲区
            ob_end_clean();
            //创建项目入口
            file_put_contents($this->entry,$contents); 
        }

        //开启我心爱的小耗子
        echo "lee server is started in 9900".PHP_EOL;
        system('/usr/bin/php -S localhost:9900 -t '.$this->folder);
    }


}
?>